#!/usr/bin/env python
# coding: utf-8

# In[43]:


import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np


# ## Problem No.1

# To write a function that will count the retention of players (by days from the date of the player's registration).
# 

# In[41]:


def retention_per_day(registrations,authentication):
    reg = pd.read_csv(registrations, sep=';')
    auth = pd.read_csv(authentication, sep=';')
    reg['reg_ts_upd'] = pd.to_datetime(reg.reg_ts, unit='s')
    reg['reg_ts_day'] = reg['reg_ts_upd'].dt.date
    auth['auth_ts_upd'] = pd.to_datetime(auth.auth_ts, unit='s')
    auth['auth_ts_day'] = auth['auth_ts_upd'].dt.date
    df = reg.merge(auth,on = ['uid'], how='inner')
    df['return'] = (df.auth_ts_day - df.reg_ts_day).dt.days+1
    group = df.groupby(['reg_ts_day', 'return'])
    cohort_data = group['uid'].size()
    cohort_data = cohort_data.reset_index()
    cohort_counts = cohort_data.pivot(index='reg_ts_day', columns='return', values='uid')
    base = cohort_counts[1]
    retention = cohort_counts.divide(base, axis=0).round(3).multiply(100,axis=0).round(2).reset_index()
    retention.to_csv('retention_per_day.csv')
    print('\nFile "retention_per_day.csv" have been saved to your local folder.\nThe example of results:\n\n', 
          retention.iloc[:, 0:11].tail(10))


# In[42]:


retention_per_day('shared/problem1-reg_data.csv','shared/problem1-auth_data.csv')


# ## Problem No.2

# There are the results of an A / B test, in which two groups of users were offered different sets of promotional offers.
# It is known that ARPU in the test group is 5% higher than in the control group.
# At the same time, in the control group, 1928 players out of 202103 turned out to be paying, and in the test group - 1805 out of 202667.
#
# What is the best set of suggestions? What metrics should be analyzed to make the right decision and how?
# In[44]:


ab = pd.read_csv('https://stepik.org/media/attachments/lesson/409318/problem2.csv',sep=';')


# In[65]:


a_non_paying_users = ab.query('testgroup == "a" and revenue == 0').count().user_id
a_clients = ab.query('testgroup == "a" and revenue != 0').count().user_id
a_arppu = ab.query('testgroup == "a" and revenue != 0').mean().revenue

b_non_paying_users = ab.query('testgroup == "b" and revenue == 0').count().user_id
b_clients = ab.query('testgroup == "b" and revenue != 0').count().user_id    
b_arppu = ab.query('testgroup == "b" and revenue != 0').mean().revenue


# In[72]:


a_users = a_non_paying_users + a_clients
a_conversion = round(a_clients/a_users *100,2)
a_arpu = round(a_arppu*a_conversion /100,2)

print('Conversion for group A:',a_conversion)
print('ARPU for group A: ',a_arpu)


# In[78]:


b_users = a_non_paying_users + a_clients
b_conversion = round(b_clients/b_users *100,2)
b_arpu = round(b_arppu*b_conversion /100,2)

print('Conversion for group B:',b_conversion)
print('ARPU for group B: ',b_arpu)


# In[85]:


conversion_change = round(((b_conversion-a_conversion)/a_conversion)*100,2)
arpu_change = round(((b_arpu-a_arpu)/a_arpu)*100,2)
print('Converion is changing by: ', conversion_change,'%')
print('ARPU is changing by: ', arpu_change,'%')


# According to the results obtained, the testing carried out leads to both a positive change in ARPU and a decrease in conversion:
# - sets of promotional offers offered to test group B have a positive effect on a certain target audience, but not on all users, since an increase in ARPPU with a decrease in the total number of paying users is explained either by an increased average check or by a large number of repeat purchases.
# - A 6 percent drop in conversions may be a more global metric that negatively impacts the ability to implement tested changes.
#
# In my opinion, a higher conversion rate is a more significant indicator for both the company's profit growth and other indicators of the unit economy. However, if the goal of the company is to focus on a specific segment of users, the test results can be assessed as positive and used as an argument for the implementation of the tested changes in production.

# ## Problem No.3

# Plants & Gardens has a time-limited themed event every month. In them, players can get unique items for the garden and characters, additional coins or bonuses. To receive the reward, you must complete a number of levels in a certain time.
#
# 1.A. What metrics can be used to evaluate the results of the last past event?
# 1.B. Suppose, in another event, we complicated the mechanics of events so that with each unsuccessful attempt to complete a level, the player will be rolled back several levels. Will the set of performance evaluation metrics change? If so, how?

# ### 1.A.

# The following metrics can be useful for evaluating the results of a past event:
# - the average amount of time to complete each level.
# - defining the beginning and end of an action / level / game.
# - count of actions performed.
# - achievement count: calculation of the achievements received by the player during the game.
# - source: reflects the number of coins / bonuses that the player has earned during the game.
# - sink: reflects the stages at which the user needs to spend coins / bonuses in order to move forward or compete with other players.
# - flow: reflects the balance of coins / bonuses that the player earned and spent during the game.

# ### 2.A.

# In addition to the metrics in 1.A, it makes sense to also count the following metrics to track which level is too difficult / easy for players:
# - start: This is an indicator of how many times, on average, the player went to the next level.
# - fail: reflects how many times the player started the level, but could not complete it.
# - complete: Counts how many times the user has successfully completed the level.

